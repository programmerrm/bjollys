# Generated by Django 5.2.4 on 2025-07-25 22:08

import ckeditor_uploader.fields
import configuration.utils.logo_upload
import core.utils
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, help_text='Enter your address...', max_length=280, null=True, verbose_name='Address')),
                ('email', models.EmailField(blank=True, help_text='Enter your email address...', max_length=180, null=True, validators=[core.utils.VALIDATE_EMAIL], verbose_name='Email')),
                ('number', models.CharField(blank=True, help_text='Enter your number...', max_length=20, null=True, validators=[core.utils.VALIDATE_PHONE_NUMBER], verbose_name='Number')),
            ],
            options={
                'verbose_name': 'Contact Info',
                'verbose_name_plural': 'Contact Info',
            },
        ),
        migrations.CreateModel(
            name='Copyright',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, help_text='Enter your website copyright text...', max_length=500, null=True, verbose_name='Copyright')),
            ],
            options={
                'verbose_name': 'Copyright',
                'verbose_name_plural': 'Copyright',
            },
        ),
        migrations.CreateModel(
            name='CryptoEmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(default='Crypto Account Activated', help_text='Email subject line for crypto course welcome email.', max_length=255)),
                ('header_title', models.CharField(default='ðŸŽ‰ Welcome to Crypto Course!', help_text='Header title displayed at the top of the email.', max_length=100)),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(help_text='HTML content of the email body (supports rich formatting).')),
            ],
        ),
        migrations.CreateModel(
            name='EcommerceEmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(default='E-commerce Account Activated', help_text='Email subject line for e-commerce course welcome email.', max_length=255)),
                ('header_title', models.CharField(default='ðŸŽ‰ Welcome to E-commerce Course!', help_text='Header title displayed at the top of the email.', max_length=100)),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(help_text='HTML content of the email body (rich text supported).')),
            ],
        ),
        migrations.CreateModel(
            name='FooterLogo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, help_text='Upload your logo...', null=True, upload_to=configuration.utils.logo_upload.LOGO_DIRECTORY_PATH, validators=[core.utils.VALIDATE_IMAGE_EXTENSION, core.utils.VALIDATE_IMAGE_SIZE], verbose_name='Logo')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, help_text='Enter your description...', max_length=250, null=True, verbose_name='Footer description')),
            ],
            options={
                'verbose_name': 'Footer Logo',
                'verbose_name_plural': 'Footer Logo',
            },
        ),
        migrations.CreateModel(
            name='FooterMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', ckeditor_uploader.fields.RichTextUploadingField(blank=True, help_text='Enter the name or content for the footer menu (with optional icons or styling).', max_length=255, null=True, verbose_name='Footer Menu Name')),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Auto-generated from the menu name.', max_length=255, null=True, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Footer Menu',
                'verbose_name_plural': 'Footer Menus',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='HeaderMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Enter the name or content for the header menu (with optional icons or styling).', max_length=255, null=True, verbose_name='Header Menu Name')),
                ('slug', models.SlugField(blank=True, help_text='Auto-generated from the menu name.', max_length=255, null=True, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Header Menu',
                'verbose_name_plural': 'Header Menus',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='LegalDisclaimer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Enter the title of the legal disclaimer.', max_length=280, null=True, verbose_name='Title')),
                ('updated_date', models.CharField(blank=True, help_text='Specify the last updated date of the disclaimer.', max_length=500, null=True, verbose_name='Updated Date')),
                ('short_description', models.TextField(blank=True, help_text='Enter a brief summary of the disclaimer.', max_length=500, null=True, verbose_name='Short Description')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, help_text='Write the full content of the legal disclaimer.', null=True, verbose_name='Full Description')),
            ],
            options={
                'verbose_name': 'Legal Disclaimer',
                'verbose_name_plural': 'Legal Disclaimer',
            },
        ),
        migrations.CreateModel(
            name='Logo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, help_text='Upload your logo...', null=True, upload_to=configuration.utils.logo_upload.LOGO_DIRECTORY_PATH, validators=[core.utils.VALIDATE_IMAGE_EXTENSION, core.utils.VALIDATE_IMAGE_SIZE], verbose_name='Logo')),
            ],
            options={
                'verbose_name': 'Logo',
                'verbose_name_plural': 'Logo',
            },
        ),
        migrations.CreateModel(
            name='SocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook', models.URLField(blank=True, help_text='You can paste a link or add styled text with icon.', null=True, verbose_name='Facebook Link')),
                ('instagram', models.URLField(blank=True, help_text='You can paste a link or add styled text with icon.', null=True, verbose_name='Instagram Link')),
                ('twitter', models.URLField(blank=True, help_text='You can paste a link or add styled text with icon.', null=True, verbose_name='Twitter Link')),
                ('linkedin', models.URLField(blank=True, help_text='You can paste a link or add styled text with icon.', null=True, verbose_name='LinkedIn Link')),
            ],
            options={
                'verbose_name': 'Social Link',
                'verbose_name_plural': 'Social Links',
            },
        ),
        migrations.CreateModel(
            name='WebsiteName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Enter your website name', max_length=280, null=True, verbose_name='Website Name')),
            ],
            options={
                'verbose_name': 'Website Name',
                'verbose_name_plural': 'Website Name',
            },
        ),
        migrations.CreateModel(
            name='WelcomeEmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(default='Welcome to Team Bjollys', max_length=255)),
                ('header_title', models.CharField(default='ðŸŽ‰ Welcome to Team Bjollys!', max_length=100)),
                ('description', ckeditor_uploader.fields.RichTextUploadingField()),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issueType', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('file', models.ImageField(blank=True, null=True, upload_to='')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
